generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------
//  Enums
// -----------

enum Role {
  USER
  ADMIN
}

enum Status {
  OPEN
  CLOSED
  IN_PROGRESS
  RESOLVED
  DUPLICATE
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}

// -----------
//  Models
// -----------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?   @default("https://bugees.vercel.app/images/default-profile-image.png")
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime  @default(now())
  role            Role      @default(USER)
  projects        Project[]
  managedProjects Project[] @relation("ManagedProjects")
  reportedBugs    Bug[]     @relation("ReportedBugs")
  assignedBugs    Bug[]     @relation("AssignedBugs")
  Comment         Comment[]

  @@map("Users")
}

model Bug {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String    @db.Text
  status      Status    @default(OPEN)
  reporterId  String
  assigneeId  String?
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reporter    User      @relation("ReportedBugs", fields: [reporterId], references: [id])
  assignee    User?     @relation("AssignedBugs", fields: [assigneeId], references: [id])
  Comment     Comment[]

  @@map("Bugs")
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  isArchived  Boolean  @default(false)
  managerId   String
  users       User[]
  bugs        Bug[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  manager     User     @relation("ManagedProjects", fields: [managerId], references: [id])

  @@map("Projects")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  bugId     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bug       Bug      @relation(fields: [bugId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("Comments")
}

// TODO: Setup audit table to keep track of update history for each model 
